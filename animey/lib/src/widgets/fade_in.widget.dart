part of '../base.imports.dart';

class AnimeyFadeIn extends StatelessWidget {
  final Widget child;
  final AnimeyType type;
  const AnimeyFadeIn({
    super.key,
    required this.child,
    required this.type,
  });

  @override
  Widget build(BuildContext context) {
    bool isLTR = true;
    if (type is FadeInDirectionalType || type is FadeInDirectionalBigType) {
      isLTR = Directionality.of(context) == TextDirection.ltr;
    }
    return switch (type) {
      FadeInType() => FadeIn(
          key: key,
          duration: type.duration,
          delay: type.delay,
          controller: type.controller,
          manualTrigger: type.manualTrigger,
          animate: type.animate,
          onFinish: type.onFinish,
          curve: type.curve,
          child: child,
        ),
      FadeInDownType() => FadeInDown(
          key: key,
          duration: type.duration,
          delay: type.delay,
          controller: type.controller,
          manualTrigger: type.manualTrigger,
          animate: type.animate,
          onFinish: type.onFinish,
          from: type.from,
          curve: type.curve,
          child: child,
        ),
      FadeInDownBigType() => FadeInDownBig(
          key: key,
          duration: type.duration,
          delay: type.delay,
          controller: type.controller,
          manualTrigger: type.manualTrigger,
          animate: type.animate,
          onFinish: type.onFinish,
          from: type.from,
          curve: type.curve,
          child: child,
        ),
      FadeInUpType() => FadeInUp(
          key: key,
          duration: type.duration,
          delay: type.delay,
          controller: type.controller,
          manualTrigger: type.manualTrigger,
          animate: type.animate,
          onFinish: type.onFinish,
          from: type.from,
          curve: type.curve,
          child: child,
        ),
      FadeInUpBigType() => FadeInUpBig(
          key: key,
          duration: type.duration,
          delay: type.delay,
          controller: type.controller,
          manualTrigger: type.manualTrigger,
          animate: type.animate,
          onFinish: type.onFinish,
          from: type.from,
          curve: type.curve,
          child: child,
        ),
      FadeInLeftType() => FadeInLeft(
          key: key,
          duration: type.duration,
          delay: type.delay,
          controller: type.controller,
          manualTrigger: type.manualTrigger,
          animate: type.animate,
          onFinish: type.onFinish,
          from: type.from,
          curve: type.curve,
          child: child,
        ),
      FadeInLeftBigType() => FadeInLeftBig(
          key: key,
          duration: type.duration,
          delay: type.delay,
          controller: type.controller,
          manualTrigger: type.manualTrigger,
          animate: type.animate,
          onFinish: type.onFinish,
          from: type.from,
          curve: type.curve,
          child: child,
        ),
      FadeInRightType() => FadeInRight(
          key: key,
          duration: type.duration,
          delay: type.delay,
          controller: type.controller,
          manualTrigger: type.manualTrigger,
          animate: type.animate,
          onFinish: type.onFinish,
          from: type.from,
          curve: type.curve,
          child: child,
        ),
      FadeInRightBigType() => FadeInRightBig(
          key: key,
          duration: type.duration,
          delay: type.delay,
          controller: type.controller,
          manualTrigger: type.manualTrigger,
          animate: type.animate,
          onFinish: type.onFinish,
          from: type.from,
          curve: type.curve,
          child: child,
        ),
      FadeInDirectionalType() => switch (isLTR) {
          true => FadeInLeft(
              key: key,
              duration: type.duration,
              delay: type.delay,
              controller: type.controller,
              manualTrigger: type.manualTrigger,
              animate: type.animate,
              onFinish: type.onFinish,
              from: type.from,
              curve: type.curve,
              child: child,
            ),
          false => FadeInRight(
              key: key,
              duration: type.duration,
              delay: type.delay,
              controller: type.controller,
              manualTrigger: type.manualTrigger,
              animate: type.animate,
              onFinish: type.onFinish,
              from: type.from,
              curve: type.curve,
              child: child,
            ),
        },
      FadeInDirectionalBigType() => switch (isLTR) {
          true => FadeInLeftBig(
              key: key,
              duration: type.duration,
              delay: type.delay,
              controller: type.controller,
              manualTrigger: type.manualTrigger,
              animate: type.animate,
              onFinish: type.onFinish,
              from: type.from,
              curve: type.curve,
              child: child,
            ),
          false => FadeInRightBig(
              key: key,
              duration: type.duration,
              delay: type.delay,
              controller: type.controller,
              manualTrigger: type.manualTrigger,
              animate: type.animate,
              onFinish: type.onFinish,
              from: type.from,
              curve: type.curve,
              child: child,
            ),
        },
    };
  }
}
